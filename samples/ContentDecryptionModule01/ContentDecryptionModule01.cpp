#include <iostream>

#include <windows.h>
#include <shlwapi.h>

#pragma comment(lib, "shlwapi.lib")

#include <mfapi.h>
#include <mfidl.h>
#include <mferror.h>
#include <mfmediaengine.h>
#include <mfcontentdecryptionmodule.h>
#include <AudioSessionTypes.h>

#pragma comment(lib, "mfplat.lib")
#pragma comment(lib, "mfuuid.lib")

#include <unknwn.h>
#include <winrt\base.h>

#include <wil\resource.h>
#include <wil\com.h>
#include <wil\token_helpers.h>

#include "Helper.h"
#include "ContentDecryption.h"

wchar_t constexpr const g_Location[] = L"https://test.playready.microsoft.com/media/test/cbcs/bbb.main.30fps.1920x1080.h264.aac.cbcs.sameKeys.mp4";

// <WRMHEADER xmlns="http://schemas.microsoft.com/DRM/2007/03/PlayReadyHeader" version="4.3.0.0">
//   <DATA><LA_URL>https://test.playready.microsoft.com/core/rightsmanager.asmx?cfg=(playenablers:(786627d8-c2a6-44be-8f88-08ae255b01a7),sl:150,ck:W31bfVt9W31bfVt9W31bfQ==,ckt:AES128BitCBC)</LA_URL>
//   <PROTECTINFO><KIDS><KID ALGID="AESCBC" VALUE="AAAAEAAQABAQABAAAAAAAQ=="></KID></KIDS></PROTECTINFO>
//   </DATA>
// </WRMHEADER>
uint8_t constexpr const g_InitializationData[]
{
	0x00, 0x00, 0x03, 0x54, 0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00, 0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95, 0x00, 0x00, 0x03, 0x34, 0x34, 0x03, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x2a, 0x03, 0x3c, 0x00, 0x57, 0x00, 0x52, 0x00, 0x4d, 0x00, 0x48, 0x00, 0x45, 0x00, 0x41, 0x00, 0x44, 0x00, 0x45, 0x00, 0x52, 0x00, 0x20, 0x00, 0x78, 0x00, 0x6d, 0x00, 0x6c, 0x00, 0x6e, 0x00, 0x73, 0x00, 0x3d, 0x00, 0x22, 0x00, 0x68, 0x00, 0x74, 0x00, 0x74, 0x00, 0x70, 0x00, 0x3a, 0x00, 0x2f, 0x00, 0x2f, 0x00, 0x73, 0x00, 0x63, 0x00, 0x68, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x73, 0x00, 0x2e, 0x00, 0x6d, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x73, 0x00, 0x6f, 0x00, 0x66, 0x00, 0x74, 0x00, 0x2e, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x2f, 0x00, 0x44, 0x00, 0x52, 0x00, 0x4d, 0x00, 0x2f, 0x00, 0x32, 0x00, 0x30, 0x00, 0x30, 0x00, 0x37, 0x00, 0x2f, 0x00, 0x30, 0x00, 0x33, 0x00, 0x2f, 0x00, 0x50, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x79, 0x00, 0x52, 0x00, 0x65, 0x00, 0x61, 0x00, 0x64, 0x00, 0x79, 0x00, 0x48, 0x00, 0x65, 0x00, 0x61, 0x00, 0x64, 0x00, 0x65, 0x00, 0x72, 0x00, 0x22, 0x00, 0x20, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x3d, 0x00, 0x22, 0x00, 0x34, 0x00, 0x2e, 0x00, 0x33, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x22, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x44, 0x00, 0x41, 0x00, 0x54, 0x00, 0x41, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x4c, 0x00, 0x41, 0x00, 0x5f, 0x00, 0x55, 0x00, 0x52, 0x00, 0x4c, 0x00, 0x3e, 0x00, 0x68, 0x00, 0x74, 0x00, 0x74, 0x00, 0x70, 0x00, 0x73, 0x00, 0x3a, 0x00, 0x2f, 0x00, 0x2f, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x2e, 0x00, 0x70, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x79, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x64, 0x00, 0x79, 0x00, 0x2e, 0x00, 0x6d, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x73, 0x00, 0x6f, 0x00, 0x66, 0x00, 0x74, 0x00, 0x2e, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x2f, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x65, 0x00, 0x2f, 0x00, 0x72, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x73, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x72, 0x00, 0x2e, 0x00, 0x61, 0x00, 0x73, 0x00, 0x6d, 0x00, 0x78, 0x00, 0x3f, 0x00, 0x63, 0x00, 0x66, 0x00, 0x67, 0x00, 0x3d, 0x00, 0x28, 0x00, 0x70, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x61, 0x00, 0x62, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x3a, 0x00, 0x28, 0x00, 0x37, 0x00, 0x38, 0x00, 0x36, 0x00, 0x36, 0x00, 0x32, 0x00, 0x37, 0x00, 0x64, 0x00, 0x38, 0x00, 0x2d, 0x00, 0x63, 0x00, 0x32, 0x00, 0x61, 0x00, 0x36, 0x00, 0x2d, 0x00, 0x34, 0x00, 0x34, 0x00, 0x62, 0x00, 0x65, 0x00, 0x2d, 0x00, 0x38, 0x00, 0x66, 0x00, 0x38, 0x00, 0x38, 0x00, 0x2d, 0x00, 0x30, 0x00, 0x38, 0x00, 0x61, 0x00, 0x65, 0x00, 0x32, 0x00, 0x35, 0x00, 0x35, 0x00, 0x62, 0x00, 0x30, 0x00, 0x31, 0x00, 0x61, 0x00, 0x37, 0x00, 0x29, 0x00, 0x2c, 0x00, 0x73, 0x00, 0x6c, 0x00, 0x3a, 0x00, 0x31, 0x00, 0x35, 0x00, 0x30, 0x00, 0x2c, 0x00, 0x63, 0x00, 0x6b, 0x00, 0x3a, 0x00, 0x57, 0x00, 0x33, 0x00, 0x31, 0x00, 0x62, 0x00, 0x66, 0x00, 0x56, 0x00, 0x74, 0x00, 0x39, 0x00, 0x57, 0x00, 0x33, 0x00, 0x31, 0x00, 0x62, 0x00, 0x66, 0x00, 0x56, 0x00, 0x74, 0x00, 0x39, 0x00, 0x57, 0x00, 0x33, 0x00, 0x31, 0x00, 0x62, 0x00, 0x66, 0x00, 0x51, 0x00, 0x3d, 0x00, 0x3d, 0x00, 0x2c, 0x00, 0x63, 0x00, 0x6b, 0x00, 0x74, 0x00, 0x3a, 0x00, 0x41, 0x00, 0x45, 0x00, 0x53, 0x00, 0x31, 0x00, 0x32, 0x00, 0x38, 0x00, 0x42, 0x00, 0x69, 0x00, 0x74, 0x00, 0x43, 0x00, 0x42, 0x00, 0x43, 0x00, 0x29, 0x00, 0x3c, 0x00, 0x2f, 0x00, 0x4c, 0x00, 0x41, 0x00, 0x5f, 0x00, 0x55, 0x00, 0x52, 0x00, 0x4c, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x50, 0x00, 0x52, 0x00, 0x4f, 0x00, 0x54, 0x00, 0x45, 0x00, 0x43, 0x00, 0x54, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x46, 0x00, 0x4f, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x4b, 0x00, 0x49, 0x00, 0x44, 0x00, 0x53, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x4b, 0x00, 0x49, 0x00, 0x44, 0x00, 0x20, 0x00, 0x41, 0x00, 0x4c, 0x00, 0x47, 0x00, 0x49, 0x00, 0x44, 0x00, 0x3d, 0x00, 0x22, 0x00, 0x41, 0x00, 0x45, 0x00, 0x53, 0x00, 0x43, 0x00, 0x42, 0x00, 0x43, 0x00, 0x22, 0x00, 0x20, 0x00, 0x56, 0x00, 0x41, 0x00, 0x4c, 0x00, 0x55, 0x00, 0x45, 0x00, 0x3d, 0x00, 0x22, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00, 0x45, 0x00, 0x41, 0x00, 0x41, 0x00, 0x51, 0x00, 0x41, 0x00, 0x42, 0x00, 0x41, 0x00, 0x51, 0x00, 0x41, 0x00, 0x42, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00, 0x51, 0x00, 0x3d, 0x00, 0x3d, 0x00, 0x22, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x2f, 0x00, 0x4b, 0x00, 0x49, 0x00, 0x44, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x2f, 0x00, 0x4b, 0x00, 0x49, 0x00, 0x44, 0x00, 0x53, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x2f, 0x00, 0x50, 0x00, 0x52, 0x00, 0x4f, 0x00, 0x54, 0x00, 0x45, 0x00, 0x43, 0x00, 0x54, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x46, 0x00, 0x4f, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x2f, 0x00, 0x44, 0x00, 0x41, 0x00, 0x54, 0x00, 0x41, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x2f, 0x00, 0x57, 0x00, 0x52, 0x00, 0x4d, 0x00, 0x48, 0x00, 0x45, 0x00, 0x41, 0x00, 0x44, 0x00, 0x45, 0x00, 0x52, 0x00, 0x3e, 0x00, 
};

struct Application : winrt::implements<Application, IUnknown>
{
	static std::wstring StoragePath()
	{
		wchar_t Path[MAX_PATH];
		WI_VERIFY(ExpandEnvironmentStringsW(L"%TEMP%", Path, static_cast<DWORD>(std::size(Path)))); // %LOCALAPPDATA%, %USERPROFILE%
		WI_VERIFY(PathCombineW(Path, Path, L"ContentDecryptionModule01"));
		return Path;
	}
	void HandleKeySessionMessage(MF_MEDIAKEYSESSION_MESSAGETYPE Type, std::vector<uint8_t> const& Data, std::wstring const& Location)
	{
		std::wcout << L"HandleKeySessionMessage" << std::endl;
	}
	void Main()
	{
		Eme::FactoryConfiguration Configuration { };
		Configuration.StoragePath = StoragePath();
		std::wcout << L"Configuration.StoragePath: " << Configuration.StoragePath << std::endl;
		CreateDirectoryW(Configuration.StoragePath.c_str(), nullptr);
		Eme::Factory Factory(Configuration);

		// NOTE: This is equivalent to JS
		//       Navigator.requestMediaKeySystemAccess("com.microsoft.playready.recommendation", [{ initDataTypes: ['cenc'], persistentState: 'optional', distinctiveIdentifier: 'required'])
		std::vector<Eme::MediaKeySystemConfiguration> MediaKeySystemConfigurationVector(1);
		auto& MediaKeySystemConfiguration = MediaKeySystemConfigurationVector[0];
		MediaKeySystemConfiguration.InitDataTypeVector.emplace_back(L"cenc");
		MediaKeySystemConfiguration.PersistentState = MF_MEDIAKEYS_REQUIREMENT_OPTIONAL;
		MediaKeySystemConfiguration.DistinctiveIdentifier = MF_MEDIAKEYS_REQUIREMENT_REQUIRED;
		auto const KeySystemAccess = Factory.RequestMediaKeySystemAccess(L"com.microsoft.playready.recommendation", MediaKeySystemConfigurationVector);
		THROW_HR_IF_MSG(MF_E_UNSUPPORTED_SERVICE, !KeySystemAccess, "PlayReady key system configuration is not supported");

		auto const MediaKeys = KeySystemAccess->CreateMediaKeys();
		MediaKeySession = MediaKeys->CreateSession();
		MediaKeySession->OnMessage = [&, StrongThis = get_strong()] (MF_MEDIAKEYSESSION_MESSAGETYPE Type, std::vector<uint8_t> const& Data, std::wstring const& Location) { HandleKeySessionMessage(Type, Data, Location); };
		try
		{
			std::wcout << L"Before GenerateRequest" << std::endl;
			MediaKeySession->GenerateRequest(L"cenc", std::vector<uint8_t>(g_InitializationData, g_InitializationData + std::size(g_InitializationData)));
			std::wcout << L"After GenerateRequest" << std::endl;
		}
		catch(...)
		{
			wchar_t Text[128];
			swprintf_s(Text, L"0x%08X", wil::ResultFromCaughtException());
			std::wcout << L"After GenerateRequest: " << Text << std::endl;
		}
	}

	std::shared_ptr<Eme::MediaKeySession> MediaKeySession;
};

int wmain()
{
	try
	{
		winrt::init_apartment();
		THROW_IF_FAILED(MFStartup(MF_VERSION));
		auto&& Scope = wil::scope_exit([] { THROW_IF_FAILED(MFShutdown()); });
		auto const Application = winrt::make_self<::Application>();
		Application->Main();
	}
	CATCH_RETURN_MSG("Fatal");
	return 0;
}
